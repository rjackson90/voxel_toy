CC:=g++
CFLAGS:=-Wall -Wextra -Werror -pedantic -std=c++11 

INCLUDE:=-Iinclude
LIBS:=-lGLEW -lGLU -lGL -lX11 -lUnitTest++

DEBUG:=-ggdb -O0
PRODUCTION:=-g -O0

TESTS:=$(wildcard tests/*.cpp)
TEST_OBJ:=$(patsubst tests/%.cpp, bin/%_test.o, $(TESTS))

SOURCES:=$(wildcard src/classes/*.cpp)
OBJECTS:=$(patsubst src/classes/%.cpp, bin/%.o, $(SOURCES))

EXECUTABLE:=GLDemo
TEST_EXEC:=UnitTests

.PHONY: production
.PHONY: debug
.PHONY: tests
.PHONY: clean
.PHONY: valgrind

clean:
	rm -rf bin/*.o
	rm -rf bin/tests/*.o
	rm -f $(EXECUTABLE)
	rm -f $(TEST_EXEC)

debug: CFLAGS += $(DEBUG)
debug: $(EXECUTABLE) tests

tests: $(TEST_EXEC)

production: CFLAGS += $(PRODUCTION) $(INCLUDE)
production: $(EXECUTABLE)

valgrind: debug
	valgrind --suppressions=res/custom.supp --leak-check=yes ./$(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
	$(CC) $(OBJECTS) -o $@ $(LIBS)

%.o : %.cpp
	$(CC) -c $(CFLAGS) $< -o $@

$(TEST_EXEC): $(TEST_OBJ) $(OBJECTS)
	$(CC) $(TEST_OBJ) $(OBJECTS) -o $@ $(LIBS) $(TEST_LIBS)
	./$(TEST_EXEC)

#bin/tests/%.o : tests/%.cpp
#	$(CC) -c $(CFLAGS) $< -o $@
